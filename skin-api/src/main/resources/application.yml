server:
  port: 8080
  tomcat:
    accesslog:
      enabled: true
      directory: logs
      prefix: access_log
      suffix: .log
      file-date-format: .yyyy-MM-dd
      pattern: "%{yyyy-MM-dd HH:mm:ss}t %a %m %U%q %s %b %D %{User-Agent}i %{Referer}i\n"
    basedir: .

#logging:
#  file:
#    name: logs/app.log
#  level:
#    root: info

spring:
  batch:
    jdbc:
      initialize-schema: always
  config:
    import: .env.properties
  datasource:
    url: ${DB_URL}
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: ${DB_USERNAME}
  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
    mongodb:
      host: ${MONGO_HOST}
      port: ${MONGO_PORT}
      database: ${MONGO_DB}
      username: ${MONGO_USERNAME}
      password: ${MONGO_PASSWORD}
      authentication-database: ${MONGO_AUTH_DB}
  #      sentinel:
#        master: mymaster
#        nodes: 127.0.0.1:26379

  jpa:
    database-platform: org.hibernate.dialect.MySQLDialect	# 이 부분 주의!
    properties:
      hibernate:
        show-sql: true
        format-sql: true
    hibernate:
      ddl-auto: update
  jwt:
    secret: ${JWT_SECRET_KEY}
    token:
      access-expiration-time: 600000 # 10분
      refresh-expiration-time: 1800000 # 30분

  kafka:
    consumer:
      bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
      group-id: dev1
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer

coolsms:
  api:
    key: ${COOLSMS_API_KEY}
    secret: ${COOLSMS_API_SECRET}
  from:
    phone: ${COOLSMS_FROM_PHONE}

naver:
  name: ${NAVER_NAME}
  password: ${NAVER_PASSWORD}
  request-token-uri: https://nid.naver.com/oauth2.0/token
  client-id: ${NAVER_CLIENT_ID}
  client-secret: ${NAVER_CLIENT_SECRET}

sample:
  email: ${SAMPLE_EMAIL}
  member-name: ${SAMPLE_MEMBER_NAME}
  phone: ${SAMPLE_PHONE}

cloud:
  aws:
    credentials:
      accessKey: ${AWS_ACCESS_KEY_ID}
      secretKey: ${AWS_SECRET_ACCESS_KEY}
    s3:
      bucket: skin-uploads
      dir: skin
    region:
      static: ap-northeast-2
    stack:
      auto: false

iamport:
  api-key: ${IMPORT_API_KEY}
  secret-key: ${IMPORT_SECRET_KEY}